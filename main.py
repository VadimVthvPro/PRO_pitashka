import psycopg2
from aiogram.filters import CommandStart
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
import base64
import json
from aiogram.filters import StateFilter
from config import config
import keyboards as kb
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import main_mo as l
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from translate import Translator
import requests
import re
from typing import Callable, Dict, Any, Awaitable
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import TelegramObject
import functools
import redis.asyncio as redis
import food_database_fallback as food_db
import google.generativeai as genai
import google.genai as genai_new
from logger_setup import bot_logger

# ============================================
# Google Gemini Setup (–Ω–æ–≤—ã–π API)
# ============================================
if config.GEMINI_API_KEY:
    import os
    os.environ['GOOGLE_API_KEY'] = config.GEMINI_API_KEY
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Gemini (–Ω–æ–≤—ã–π API)
    gemini_client = genai_new.Client(api_key=config.GEMINI_API_KEY)
    bot_logger.info("Gemini API configured successfully with gemini-2.5-flash model (new API)")
else:
    bot_logger.error("GEMINI_API_KEY not found in .env file!")
    gemini_client = None


# ============================================
# Redis Cache Setup (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
# ============================================
try:
    redis_client = redis.from_url(config.get_redis_url(), decode_responses=True)
    REDIS_AVAILABLE = True
    bot_logger.info("Redis connection configured successfully")
except Exception as e:
    redis_client = None
    REDIS_AVAILABLE = False
    bot_logger.warning(f"Redis not available, caching disabled: {e}")

async def get_from_cache(key: str):
    """Get data from Redis cache (optional)."""
    if not REDIS_AVAILABLE or redis_client is None:
        return None
    try:
        return await redis_client.get(key)
    except Exception as e:
        bot_logger.warning(f"Redis get error for key {key}: {e}")
        return None

async def set_to_cache(key: str, value: str, ttl: int):
    """Set data to Redis cache with a TTL (optional)."""
    if not REDIS_AVAILABLE or redis_client is None:
        return False
    try:
        await redis_client.set(key, value, ex=ttl)
        return True
    except Exception as e:
        bot_logger.warning(f"Redis set error for key {key}: {e}")
        return False


# ============================================
# Retry Decorator
# ============================================
def async_retry(max_attempts: int, delay: float, exceptions: tuple):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    """
    def decorator(async_func):
        @functools.wraps(async_func)
        async def wrapper(*args, **kwargs):
            for attempt in range(max_attempts):
                try:
                    return await async_func(*args, **kwargs)
                except exceptions as e:
                    if attempt == max_attempts - 1:
                        raise  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
                    await asyncio.sleep(delay)
        return wrapper
    return decorator

GIF_LIBRARY = {
    "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞": "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExcnIycmluczlwMG92cXV0N3BpbG14ajdibzNxa2owc3M5N3U2cTNleCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3tCMXFyNBabv8f6DoW/giphy.gif",
}

# GigaChat, DeepSeek, YandexGPT - —É–¥–∞–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Gemini

# ============================================
# Middleware for Privacy Consent
# ============================================
class PrivacyConsentMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        # –ú—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–±—ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not isinstance(event, (types.Message, types.CallbackQuery)):
            return await handler(event, data)

        user_id = event.from_user.id
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è
        if isinstance(event, types.Message) and event.text and event.text.startswith('/start'):
            return await handler(event, data)
        if isinstance(event, types.CallbackQuery) and event.data in ['accept_privacy', 'decline_privacy']:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT privacy_consent_given FROM user_main WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()

        if not result or not result[0]:
            # –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. "
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.",
                reply_markup=kb.privacy_consent_keyboard()
            )
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        return await handler(event, data)

languages = {'–†—É—Å—Å–∫–∏–π üá∑üá∫': 'ru', 'English üá¨üáß': 'en', 'Deutsch üá©üá™': 'de', 'Fran√ßaise üá´üá∑': 'fr', 'Spanish üá™üá∏': 'es'}
llaallallaa = {'ru': '–†—É—Å—Å–∫–∏–π üá∑üá∫', 'en': 'English üá¨üáß', 'de': 'Deutsch üá©üá™', 'fr': 'Fran√ßaise üá´üá∑', 'es': 'Spanish üá™üá∏'}

tren_list = [["–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞", "Bench press", "Banc de musculation", "Bankdr√ºcken", "Press de banca"],
             ["–ü–æ–¥—ä—ë–º –Ω–∞ –±–∏—Ü–µ–ø—Å", "Curl de b√≠ceps", "Bizepscurl", "Flexion des biceps", "Biceps curl"],
             ["–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "Pull-ups", "Tractions", "Klimmz√ºge", "Pull-ups"]]

TOKEN = config.TELEGRAM_TOKEN



bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
# Register middleware
dp.update.middleware(PrivacyConsentMiddleware())

conn = psycopg2.connect(**config.get_db_config())
conn.autocommit = True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
cursor = conn.cursor()
bot_logger.info("Database connection established with autocommit enabled")


class REG(StatesGroup):
    height = State()
    age = State()
    sex = State()
    want = State()
    weight = State()
    types = State()
    length = State()
    food = State()
    food_list = State()
    food_photo = State()
    grams = State()
    food_meals = State()
    train = State()
    tren_choiser = State()
    svo = State()
    leng = State()
    leng2 = State()
    grams1 = State()
    new_weight = State()
    tren_ai = State()
    new_height = State()
    ai_ans = State()


@dp.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    """Handles the /start command - shows language selection first."""
    user_id = message.from_user.id
    bot_logger.info(f"User {user_id} (@{message.from_user.username}) sent /start")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º deep link –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    start_payload = message.text.split(' ')[1] if len(message.text.split(' ')) > 1 else None
    utm_source, utm_medium, utm_campaign, ref_code = None, None, None, None

    if start_payload:
        params = start_payload.split('_')
        if params[0] == 'ref' and len(params) > 1:
            ref_code = params[1]
            utm_source = params[1]
        elif params[0] == 'utm' and len(params) >= 4:
            utm_source = params[1]
            utm_medium = params[2]
            utm_campaign = params[3]

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    cursor.execute("SELECT privacy_consent_given, ref_code FROM user_main WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()
    
    if result and (ref_code and not result[1]):
        cursor.execute(
            """
            UPDATE user_main 
            SET utm_source = %s, utm_medium = %s, utm_campaign = %s, ref_code = %s
            WHERE user_id = %s;
            """,
            (utm_source, utm_medium, utm_campaign, ref_code, user_id)
        )
        conn.commit()
    
    if not result:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute(
            """
            INSERT INTO user_main (user_id, user_name, utm_source, utm_medium, utm_campaign, ref_code)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING;
            """,
            (user_id, message.from_user.first_name, utm_source, utm_medium, utm_campaign, ref_code)
        )
        conn.commit()

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≤–µ—Ä–Ω—É–≤—à–∏–π—Å—è)
    welcome_text = (
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PROpitashka!</b>\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ñ–∏—Ç–Ω–µ—Å—É.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language üëá"
    )
    
    # –°–æ–∑–¥–∞–µ–º ReplyKeyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    lang_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")],
            [KeyboardButton(text="English üá¨üáß")],
            [KeyboardButton(text="Deutsch üá©üá™")],
            [KeyboardButton(text="Fran√ßaise üá´üá∑")],
            [KeyboardButton(text="Spanish üá™üá∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        welcome_text,
        reply_markup=lang_keyboard
    )

@dp.callback_query(F.data.in_(['accept_privacy', 'decline_privacy']))
async def handle_privacy_consent(callback_query: CallbackQuery, state: FSMContext):
    """Handles user's response to the privacy policy."""
    user_id = callback_query.from_user.id
    
    if callback_query.data == 'accept_privacy':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è
        cursor.execute(
            """
            UPDATE user_main 
            SET privacy_consent_given = TRUE, privacy_consent_at = NOW() 
            WHERE user_id = %s;
            """,
            (user_id,)
        )
        conn.commit()
        bot_logger.info(f"User {user_id} accepted privacy policy")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT lang FROM user_lang WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        lang_code = result[0] if result else 'en'
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
        try:
            await callback_query.message.delete()
        except:
            pass
        
        # –°–æ–∑–¥–∞—ë–º Message –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ show_registration_menu
        from aiogram.types import Message as MessageType
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_query.message –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        await show_registration_menu(callback_query.message, lang_code)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è
        await callback_query.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. "
            "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —Å–Ω–æ–≤–∞.",
            reply_markup=None
        )
    
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
@dp.message(F.text.in_(['–†—É—Å—Å–∫–∏–π üá∑üá∫', 'English üá¨üáß', 'Deutsch üá©üá™', 'Fran√ßaise üá´üá∑', 'Spanish üá™üá∏']))
async def handle_language_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    user_id = message.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    lang_map = {
        '–†—É—Å—Å–∫–∏–π üá∑üá∫': 'ru',
        'English üá¨üáß': 'en',
        'Deutsch üá©üá™': 'de',
        'Fran√ßaise üá´üá∑': 'fr',
        'Spanish üá™üá∏': 'es'
    }
    lang_code = lang_map.get(message.text, 'en')
    bot_logger.info(f"User {user_id} selected language: {lang_code}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –ë–î
    cursor.execute(
        """
        INSERT INTO user_lang (user_id, lang)
        VALUES (%s, %s)
        ON CONFLICT (user_id)
        DO UPDATE SET lang = EXCLUDED.lang;
        """,
        (user_id, lang_code)
    )
    conn.commit()
    bot_logger.info(f"Language {lang_code} saved for user {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    cursor.execute("SELECT privacy_consent_given FROM user_main WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()
    
    if result and result[0]:
        # –ï—Å–ª–∏ —É–∂–µ –¥–∞–≤–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        bot_logger.info(f"User {user_id} already gave consent, showing registration menu")
        await show_registration_menu(message, lang_code)
        return
    
    # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –¥–∞–≤–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    try:
        with open('PRIVACY_POLICY.txt', 'r', encoding='utf-8') as f:
            privacy_text = f.read()
        privacy_preview = privacy_text[:3500]
        if len(privacy_text) > 3500:
            privacy_preview += "\n\n... (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /privacy)"
    except:
        privacy_preview = "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É."

    privacy_msg = (
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PROpitashka!</b>\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ "
        "–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n"
        "<i>(–ö—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ)</i>\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "<b>üìã –û–°–ù–û–í–ù–´–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø:</b>\n\n"
        "‚úÖ –ú—ã —Å–æ–±–∏—Ä–∞–µ–º: –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç, –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö\n"
        "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è: —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π, –ò–ú–¢, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        "‚úÖ –ó–∞—â–∏—â–∞–µ–º: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –ë–î\n"
        "‚úÖ –ù–µ –ø—Ä–æ–¥–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        "‚úÖ AI-—Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Google Gemini (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –ù–ï –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞!\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏: /privacy\n\n"
        "–ù–∞–∂–∏–º–∞—è ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    )
    
    await message.answer(
        privacy_msg,
        reply_markup=kb.privacy_consent_keyboard(),
        disable_web_page_preview=True
    )


async def show_registration_menu(message: Message, lang_code: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    user_id = message.from_user.id
    bot_logger.info(f"Showing registration menu to user {user_id}")
    
    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —è–∑—ã–∫–æ–≤
    lang_names = {
        'ru': '–†—É—Å—Å–∫–∏–π üá∑üá∫',
        'en': 'English üá¨üáß',
        'de': 'Deutsch üá©üá™',
        'fr': 'Fran√ßaise üá´üá∑',
        'es': 'Spanish üá™üá∏'
    }
    
    # –¢–µ–∫—Å—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    welcome_messages = {
        'ru': (
            f"‚úÖ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_names[lang_code]}\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª</b>, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã "
            "(—Ä–æ—Å—Ç, –≤–µ—Å, —Ü–µ–ª—å), –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n\n"
            "‚Ä¢ –ï—Å–ª–∏ –≤—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ <b>¬´–í—Ö–æ–¥¬ª</b>."
        ),
        'en': (
            f"‚úÖ Language selected: {lang_names[lang_code]}\n\n"
            f"üëã Hello, {message.from_user.first_name}!\n\n"
            "Now let's set up your profile.\n\n"
            "‚Ä¢ Press <b>\"Registration\"</b> to enter your parameters "
            "(height, weight, goal), and I'll calculate your optimal calorie intake.\n\n"
            "‚Ä¢ If you've already registered, press <b>\"Entry\"</b>."
        ),
        'de': (
            f"‚úÖ Sprache ausgew√§hlt: {lang_names[lang_code]}\n\n"
            f"üëã Hallo, {message.from_user.first_name}!\n\n"
            "Jetzt richten wir Ihr Profil ein.\n\n"
            "‚Ä¢ Dr√ºcken Sie <b>\"Anmeldung\"</b>, um Ihre Parameter einzugeben "
            "(Gr√∂√üe, Gewicht, Ziel), und ich berechne Ihre optimale Kalorienaufnahme.\n\n"
            "‚Ä¢ Wenn Sie sich bereits registriert haben, dr√ºcken Sie <b>\"Eintrag\"</b>."
        ),
        'fr': (
            f"‚úÖ Langue s√©lectionn√©e: {lang_names[lang_code]}\n\n"
            f"üëã Bonjour, {message.from_user.first_name}!\n\n"
            "Maintenant, configurons votre profil.\n\n"
            "‚Ä¢ Appuyez sur <b>\"Enregistrement\"</b> pour saisir vos param√®tres "
            "(taille, poids, objectif), et je calculerai votre apport calorique optimal.\n\n"
            "‚Ä¢ Si vous √™tes d√©j√† inscrit, appuyez sur <b>\"Entr√©e\"</b>."
        ),
        'es': (
            f"‚úÖ Idioma seleccionado: {lang_names[lang_code]}\n\n"
            f"üëã ¬°Hola, {message.from_user.first_name}!\n\n"
            "Ahora configuremos tu perfil.\n\n"
            "‚Ä¢ Presiona <b>\"Inscripci√≥n\"</b> para ingresar tus par√°metros "
            "(altura, peso, objetivo), y calcular√© tu ingesta cal√≥rica √≥ptima.\n\n"
            "‚Ä¢ Si ya te registraste, presiona <b>\"Entrada\"</b>."
        )
    }
    
    welcome_text = welcome_messages.get(lang_code, welcome_messages['en'])
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    buttons_text = {
        'ru': ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–í—Ö–æ–¥'],
        'en': ['Registration', 'Entry'],
        'de': ['Anmeldung', 'Eintrag'],
        'fr': ['Enregistrement', 'Entr√©e'],
        'es': ['Inscripci√≥n', 'Entrada']
    }
    
    lang_buttons = buttons_text.get(lang_code, buttons_text['en'])
    start_menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=lang_buttons[0]), KeyboardButton(text=lang_buttons[1])]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –º–µ–Ω—é
    try:
        await bot.send_photo(
            user_id,
            photo=FSInputFile(path='/Users/VadimVthv/Desktop/PROpitashka/new_logo.jpg'),
            caption=welcome_text,
            reply_markup=start_menu_keyboard
        )
        bot_logger.info(f"Welcome message with photo sent to user {user_id}")
    except Exception as e:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        bot_logger.error(f"Failed to send photo to user {user_id}: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await bot.send_message(
            user_id,
            text=welcome_text,
            reply_markup=start_menu_keyboard
        )



@dp.message(Command('privacy'))
async def send_privacy_policy(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        with open('PRIVACY_POLICY.txt', 'r', encoding='utf-8') as f:
            privacy_text = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç Telegram)
        max_length = 4000
        parts = [privacy_text[i:i+max_length] for i in range(0, len(privacy_text), max_length)]
        
        await message.answer(
            f"üìÑ <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"–í—Å–µ–≥–æ —á–∞—Å—Ç–µ–π: {len(parts)}"
        )
        
        for i, part in enumerate(parts, 1):
            await message.answer(
                f"<i>–ß–∞—Å—Ç—å {i}/{len(parts)}</i>\n\n"
                f"<pre>{part}</pre>"
            )
            await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
    except FileNotFoundError:
        await message.answer(
            "üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ /support"
        )


@dp.message(F.text.in_({'–í—Ö–æ–¥', 'Entry', 'Entr√©e', 'Entrada', 'Eintrag'}))
async def entrance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"""
    user_id = message.from_user.id
    bot_logger.info(f"User {user_id} requesting entrance")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cursor.execute("""
            SELECT imt, imt_str, cal, weight, height 
            FROM user_health 
            WHERE user_id = %s
            ORDER BY date DESC
            LIMIT 1
        """, (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            bot_logger.warning(f"User {user_id} tried to login but no data found in user_health")
            await message.answer(
                l.printer(user_id, 'noData') if hasattr(l.printer(user_id, 'noData'), '__call__') 
                else "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=kb.keyboard(user_id, 'main_menu')
            )
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        imt, imt_str, cal, weight, height = float(user_data[0]), user_data[1], float(user_data[2]), float(user_data[3]), float(user_data[4])
        bot_logger.info(f"User {user_id} entrance successful: weight={weight}, height={height}, imt={imt}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            message.chat.id,
            text=l.printer(user_id, 'info').format(
                message.from_user.first_name, 
                weight, 
                height, 
                imt,
                imt_str
            )
        )
        await message.answer(
            text=l.printer(user_id, 'SuccesfulReg'),
            reply_markup=kb.keyboard(user_id, 'main_menu')
        )
        
    except Exception as e:
        bot_logger.error(f"Error during entrance for user {user_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=kb.keyboard(user_id, 'main_menu')
        )


@dp.message(F.text.in_({'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', "Anmeldung", 'Registration', 'Enregistrement', 'Inscripci√≥n'}))
async def registration(message: Message, state: FSMContext):
    await state.set_state(REG.height)
    await bot.send_message(message.chat.id, text=l.printer(message.from_user.id, 'height'))


@dp.message(REG.height)
async def height(message: Message, state: FSMContext):
    try:
        height_value = float(message.text.replace(',', '.'))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ä–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 100-250 —Å–º
        if not (100 <= height_value <= 250):
            await message.answer(
                l.printer(message.from_user.id, 'height') + "\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (100-250 —Å–º)."
            )
            return
        
        await state.update_data(height=height_value)
        await state.set_state(REG.age)
        await message.answer(l.printer(message.from_user.id, 'age'))
    except ValueError:
        await state.set_state(REG.height)
        await bot.send_message(message.chat.id, text=l.printer(message.from_user.id, 'height') + "\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@dp.message(REG.age)
async def age(message: Message, state: FSMContext):
    try:
        age_value = int(message.text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 10-120 –ª–µ—Ç
        if not (10 <= age_value <= 120):
            await message.answer(
                l.printer(message.from_user.id, 'age') + "\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120 –ª–µ—Ç)."
            )
            return
        
        await state.update_data(age=age_value)
        await state.set_state(REG.sex)
        await message.answer(l.printer(message.from_user.id, 'sex'),
                             reply_markup=kb.keyboard(message.from_user.id, 'sex'))
    except ValueError:
        await state.set_state(REG.age)
        await message.answer(l.printer(message.from_user.id, 'age') + "\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@dp.message(REG.sex)
async def sex(message: Message, state: FSMContext):
    await state.update_data(sex=message.text)
    await state.set_state(REG.want)
    await message.answer(l.printer(message.from_user.id, 'aim'), reply_markup=kb.keyboard(message.from_user.id, 'want'))


@dp.message(REG.want)
async def want(message: Message, state: FSMContext):
    await state.update_data(want=message.text)
    await state.set_state(REG.weight)
    await message.answer(l.printer(message.from_user.id, 'weight'), reply_markup=types.ReplyKeyboardRemove())


@dp.message(REG.weight)
async def wei(message: Message, state: FSMContext):
    try:
        weight_text = message.text.replace(',', '.')
        weight = float(weight_text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 30-300 –∫–≥
        if not (30 <= weight <= 300):
            await message.answer(
                l.printer(message.from_user.id, 'weight') + "\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (30-300 –∫–≥)."
            )
            return
        
        await state.update_data(weight=weight)
        data = await state.get_data()
        height, sex, age, aim = data['height'], data['sex'], data['age'], data['want']
        height, sex, age = float(height), str(sex), int(age)
        imt = round(weight / ((height / 100) ** 2), 3)
        imt_using_words = calculate_imt_description(imt, message)
        cal = float(calculate_calories(sex, weight, height, age, message))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ
        bot_logger.info(f"Inserting user_health: user_id={message.from_user.id}, imt={imt}, cal={cal}, weight={weight}, height={height}")
        cursor.execute("""
            INSERT INTO user_health (user_id, imt, imt_str, cal, date, weight, height) 
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (message.from_user.id, imt, imt_using_words, cal, datetime.datetime.now().strftime('%Y-%m-%d'), weight, height))
        bot_logger.info("user_health inserted successfully")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_main (–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç–∞)
        bot_logger.info(f"Inserting/updating user_main: user_id={message.from_user.id}, sex={sex}, age={age}")
        cursor.execute("""
            INSERT INTO user_main (user_id, user_name, user_sex, date_of_birth)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (user_id)
            DO UPDATE SET user_sex = EXCLUDED.user_sex, date_of_birth = EXCLUDED.date_of_birth;
            """, (message.from_user.id, message.from_user.first_name, sex, age))
        bot_logger.info("user_main inserted/updated successfully")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_aims
        bot_logger.info(f"Inserting/updating user_aims: user_id={message.from_user.id}, aim={aim}, cal={cal}")
        cursor.execute("""
            INSERT INTO user_aims (user_id, user_aim, daily_cal)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id)
            DO UPDATE SET user_aim = EXCLUDED.user_aim, daily_cal = EXCLUDED.daily_cal;
            """, (message.from_user.id, aim, cal))
        bot_logger.info("user_aims inserted/updated successfully")

        conn.commit()
        bot_logger.info(f"User {message.from_user.id} registered successfully: sex={sex}, age={age}, weight={weight}, height={height}, all data committed to DB")
        await bot.send_message(
            message.chat.id,
            text=l.printer(message.from_user.id, 'info').format(message.from_user.first_name, weight, height, imt,
                                                                imt_using_words)
        )
        await message.answer(text=l.printer(message.from_user.id, 'SuccesfulReg'),
                             reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
        await state.clear()
    except Exception as e:
        bot_logger.error(f"Error during registration for user {message.from_user.id}: {e}")
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=kb.keyboard(message.from_user.id, 'main_menu')
        )
        await state.clear()


def calculate_imt_description(imt, message: Message):
    if round(imt) < 15:
        return l.printer(message.from_user.id, 'imt1')
    elif round(imt) in range(14, 18):
        return l.printer(message.from_user.id, 'imt2')
    elif round(imt) in range(18, 25):
        return l.printer(message.from_user.id, 'imt3')
    elif round(imt) in range(25, 30):
        return l.printer(message.from_user.id, 'imt4')
    else:
        return l.printer(message.from_user.id, 'imt5')


def calculate_calories(sex, weight, height, age, message):
    if sex == l.printer(message.from_user.id, 'kbMAN'):
        return (10 * weight) + (6.25 * height) - (5 * age) + 5
    elif sex == l.printer(message.from_user.id, 'kbWOMAN'):
        return (10 * weight) + (6.25 * height) - (5 * age) - 161


def markdown_to_telegram_html(text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram
    """
    import re
    
    # –ó–∞–º–µ–Ω—è–µ–º ## –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    text = re.sub(r'##\s*(.+?)(?:\n|$)', r'\n<b>\1</b>\n\n', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º ### –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'###\s*(.+?)(?:\n|$)', r'\n<b>\1</b>\n', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º **–∂–∏—Ä–Ω—ã–π** –Ω–∞ <b>–∂–∏—Ä–Ω—ã–π</b>
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º *–∫—É—Ä—Å–∏–≤* –Ω–∞ <i>–∫—É—Ä—Å–∏–≤</i> (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏, –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤)
    text = re.sub(r'(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)', r'<i>\1</i>', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ --- –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\n---\n', r'\n\n', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º `–∫–æ–¥` –Ω–∞ <code>–∫–æ–¥</code>
    text = re.sub(r'`(.+?)`', r'<code>\1</code>', text)
    
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã (–±–æ–ª—å—à–µ 2 –ø–æ–¥—Ä—è–¥)
    text = re.sub(r'\n{3,}', r'\n\n', text)
    
    return text.strip()


def split_message(text, user_id):
    a = list(text.split("\n"))
    cursor.execute("SELECT lang FROM user_lang WHERE user_id = {}".format(user_id))
    ll = cursor.fetchone()[0]
    b = ''
    translator = Translator(from_lang='ru', to_lang=ll)
    for i in range(len(a)):
        b = b + translator.translate(a[i]) + '\n'

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown -> HTML
    formatted_text = markdown_to_telegram_html(text)
    
    max_length = 4096
    return [formatted_text[i:i + max_length] for i in range(0, len(formatted_text), max_length)]


def is_not_none(variable):
    return 0 if variable is None else variable


# DeepSeek —É–¥–∞–ª—ë–Ω - —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è


@async_retry(max_attempts=config.API_RETRY_ATTEMPTS, delay=config.API_RETRY_DELAY, exceptions=(Exception,))
async def generate(zap, cache_key: str = None, cache_ttl: int = config.CACHE_TTL_AI_RESPONSES):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI —á–µ—Ä–µ–∑ Google Gemini, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache_key:
        cached_response = await get_from_cache(cache_key)
        if cached_response:
            print(f"–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {cache_key}")
            return cached_response

    # 2. –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini (–Ω–æ–≤—ã–π API)
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API —Å gemini-2.5-flash
        response = await asyncio.to_thread(
            gemini_client.models.generate_content,
            model="gemini-2.5-flash",
            contents=zap
        )
        result = response.text

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if cache_key and result:
            await set_to_cache(cache_key, result, cache_ttl)
            print(f"–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {cache_key}")

        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è retry-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞

@dp.message(F.text.in_(
    {'–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', "A√±adir formaci√≥n", 'Add training', 'Ajouter une formation', 'Ausbildung hinzuf√ºgen'}))
async def tren(message: Message, state: FSMContext):
    await bot.send_message(message.chat.id, text=l.printer(message.from_user.id, 'TrenType'),
                           reply_markup=kb.keyboard(message.from_user.id, 'tren'))
    await state.set_state(REG.types)


@dp.message(REG.types)
async def tren_type(message: Message, state: FSMContext):
    await state.update_data(types=message.text)
    await state.set_state(REG.length)
    await message.answer(text=l.printer(message.from_user.id, 'trenMIN'))

@dp.message(StateFilter("waiting_for_weight"))
async def set_weight_and_continue(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –≤–∞—à –≤–µ—Å –≤ –∫–≥.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –≤ –ë–î
    cursor.execute(
        """INSERT INTO user_health (user_id, date, weight)
           VALUES (%s, CURRENT_DATE, %s)
           ON CONFLICT (user_id, date) DO UPDATE SET weight = EXCLUDED.weight""",
        (message.from_user.id, weight)
    )
    conn.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    await state.set_state(REG.length)
    await tren_len(message, state)
@dp.message(REG.length)
async def tren_len(message: Message, state: FSMContext):
    user_id = message.from_user.id

    data = await state.get_data()
    waiting_for_weight = data.get("waiting_for_weight", False)

    # –í–µ—Ç–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤–µ—Å –ø–æ –Ω–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
    if waiting_for_weight:
        # 1) –ü–∞—Ä—Å–∏–º –≤–µ—Å
        text = message.text.strip().replace(",", ".")
        try:
            weight = float(text)
            if not (25 <= weight <= 400):
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 72.5).")
                return
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 72.5).")
            return

        # 2) –ü–∏—à–µ–º –≤–µ—Å –≤ –ë–î —á–µ—Ä–µ–∑ SELECT/UPDATE/INSERT (–±–µ–∑ ON CONFLICT)
        cursor.execute(
            "SELECT 1 FROM user_health WHERE user_id = %s AND date = CURRENT_DATE",
            (user_id,)
        )
        exists = cursor.fetchone() is not None

        if exists:
            cursor.execute(
                "UPDATE user_health SET weight = %s WHERE user_id = %s AND date = CURRENT_DATE",
                (weight, user_id)
            )
        else:
            cursor.execute(
                "INSERT INTO user_health (user_id, date, weight) VALUES (%s, CURRENT_DATE, %s)",
                (user_id, weight)
            )
        conn.commit()

        # 3) –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–µ—Å–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—á—ë—Ç
        await state.update_data(waiting_for_weight=False)

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        data = await state.get_data()
        tren_type = data.get("types")
        length_str = data.get("length")
        if not tren_type or not length_str:
            await message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        try:
            time_min = int(length_str)
            if time_min <= 0:
                await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç.")
                return
        except ValueError:
            await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
            return

        intensivity = intensiv(tren_type, user_id)
        if intensivity is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –µ—â—ë —Ä–∞–∑.")
            await state.clear()
            return

        tren_cal = round((weight * intensivity * time_min / 24), 3)

        cursor.execute(
            "INSERT INTO user_training (user_id, date, training_cal, tren_time) VALUES (%s, CURRENT_DATE, %s, %s)",
            (user_id, tren_cal, time_min)
        )
        conn.commit()

        cursor.execute(
            "SELECT COALESCE(SUM(training_cal), 0) FROM user_training WHERE date = CURRENT_DATE AND user_id = %s",
            (user_id,)
        )
        result = cursor.fetchone()[0]

        await bot.send_message(message.chat.id, text=l.printer(user_id, 'TrenCal').format(tren_cal))
        await bot.send_message(
            message.chat.id,
            text=l.printer(user_id, 'TrenCalDay').format(message.from_user.first_name, result),
            reply_markup=kb.keyboard(user_id, 'main_menu')
        )
        await state.clear()
        return

    # –í–µ—Ç–∫–∞: –æ–±—ã—á–Ω—ã–π —Ö–æ–¥ ‚Äî –ø—Ä–∏—à–ª–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –≤–µ—Å
    await state.update_data(length=message.text)
    data = await state.get_data()

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        time_min = int(data['length'])
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-300 –º–∏–Ω—É—Ç
        if not (1 <= time_min <= 300):
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (1-300 –º–∏–Ω—É—Ç).")
            return
    except (ValueError, KeyError):
        await message.answer("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
        return

    # 2) –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute(
        "SELECT weight FROM user_health WHERE user_id = %s AND date = CURRENT_DATE",
        (user_id,)
    )
    row = cursor.fetchone()

    if not row or row[0] is None:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å –∏ –∂–¥—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–∫–≥):")
        await state.update_data(waiting_for_weight=True)
        return

    weight = float(row[0])

    # 3) –°—á–∏—Ç–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
    tren_type = data.get("types")
    intensivity = intensiv(tren_type, user_id)
    if intensivity is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    tren_cal = round((weight * intensivity * time_min / 24), 3)

    cursor.execute(
        "INSERT INTO user_training (user_id, date, training_cal, tren_time) VALUES (%s, CURRENT_DATE, %s, %s)",
        (user_id, tren_cal, time_min)
    )
    conn.commit()

    cursor.execute(
        "SELECT COALESCE(SUM(training_cal), 0) FROM user_training WHERE date = CURRENT_DATE AND user_id = %s",
        (user_id,)
    )
    result = cursor.fetchone()[0]

    await bot.send_message(message.chat.id, text=l.printer(user_id, 'TrenCal').format(tren_cal))
    await bot.send_message(
        message.chat.id,
        text=l.printer(user_id, 'TrenCalDay').format(message.from_user.first_name, result),
        reply_markup=kb.keyboard(user_id, 'main_menu')
    )
    await state.clear()


def intensiv(intensiv, id):
    if intensiv == l.printer(id, 'tren1'):
        return 2.5
    if intensiv == l.printer(id, 'tren2'):
        return 3
    if intensiv == l.printer(id, 'tren3'):
        return 3.5


def replace_none_with_zero_in_list(lst, index):
    if 0 <= index < len(lst):
        if lst[index] is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç None
            lst[index] = 0  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ 0
    return lst


@dp.message(F.text.in_({'–í–≤–µ—Å—Ç–∏ –µ–¥—É –∑–∞ –¥–µ–Ω—å', "Das Essen des Tages einf√ºhren", "Enter a day's worth of food",
                        "Introducir la comida del d√≠a", 'Pr√©senter les aliments du jour'}))
async def food1(message: Message, state: FSMContext):
    await message.answer(text=l.printer(message.from_user.id, 'ChooseTheWay'),
                         reply_markup=kb.keyboard(message.from_user.id, 'food'))
    await state.set_state(REG.food)


@dp.message(REG.food)
async def foodchoise(message: Message, state: FSMContext):
    await state.update_data(food=message.text)
    await state.set_state(REG.food_photo)

    data = await state.get_data()
    if data['food'] == l.printer(message.from_user.id, 'kbfood2'):
        await message.answer(text=l.printer(message.from_user.id, 'SendMes'), reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(REG.food_list)

    if data['food'] == l.printer(message.from_user.id, 'kbfood1'):
        await message.answer(text=l.printer(message.from_user.id, 'SengFoto'), reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(REG.food_photo)


@dp.message(REG.food_list)
async def names(message: Message, state: FSMContext):
    await state.update_data(food_list=message.text.split(","))
    await bot.send_message(message.chat.id, text=l.printer(message.from_user.id, 'gram'))
    await state.set_state(REG.grams)


@dp.message(REG.food_photo)
async def handle_photo(message: Message, state: FSMContext):
    await state.update_data(food_photo=message.photo)
    data = await state.get_data()
    photo = data['food_photo'][-1]

    await state.clear()
    name_a = []
    file_info = await bot.get_file(photo.file_id)
    
    @async_retry(max_attempts=config.API_RETRY_ATTEMPTS, delay=config.API_RETRY_DELAY, exceptions=(Exception,))
    async def download_file_with_retry(file_info):
        return await bot.download_file(file_info.file_path)

    downloaded_file = await download_file_with_retry(file_info)
    save_path = 'photo.jpg'


@dp.message(F.text.in_(
    {'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É', "Dem Chatraum beitreten", "Join the chat room", "Rejoindre le salon de discussion",
     'Unirse a la sala de chat'}))
async def chat(message: Message):
    await message.answer(text='https://t.me/+QVhMA2topDgzOWVi',
                         reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))


@dp.message(F.text.in_({'–î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–∏—Ç—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –≤–æ–¥—ã', "A√±ade un vaso de agua", "Ajoutez un verre d'eau potable",
                        "Add a drunken glass of water", 'Ein getrunkenes Glas Wasser hinzuf√ºgen'}))
async def chating(message: Message):
    cursor.execute("""
        INSERT INTO water (user_id, data, count)
        VALUES (%s, CURRENT_DATE, 1)
        ON CONFLICT (user_id, data)
        DO UPDATE SET count = water.count + 1
        RETURNING count;
    """, (message.from_user.id,))
    drank = cursor.fetchone()[0]
    conn.commit()

    await message.answer(text=l.printer(message.from_user.id, 'cup'),
                         reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))


@dp.message(REG.grams1)
async def grams1(message: Message, state: FSMContext):
    try:
        await state.update_data(grams1=message.text)
        data = await state.get_data()
        raw_grams = data.get('grams1')
        name_a = data['food_list']
        cursor.execute("SELECT lang FROM user_lang WHERE user_id = %s", (message.from_user.id,))
        ll = cursor.fetchone()[0]
        translator = Translator(from_lang="ru", to_lang=ll)

        grams_list = [item.strip() for item in raw_grams.split(',') if item.strip()]
        if len(grams_list) != len(name_a):
            await message.answer(
                l.printer(message.from_user.id, 'gram')
                + "\n\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
            )
            await state.set_state(REG.grams1)
            return

        try:
            grams_values = [float(item.replace(',', '.')) for item in grams_list]
        except ValueError:
            await message.answer(
                l.printer(message.from_user.id, 'gram')
                + "\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120 –∏–ª–∏ 120,5)."
            )
            await state.set_state(REG.grams1)
            return

        a = '{"name":{cal:"",b:‚Äù‚Äù, g:‚Äù‚Äù, u:‚Äù‚Äù}, }'
        prod_kbgu = await generate(
            f'–ü—Ä–µ–¥—Å—Ç–∞–≤—å –∫–±–∂—É {name_a} –≤ –≤–∏–¥–µ —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ json {a}')
        pattern = r'\"(\w+)\":\s*{\s*\"cal\":\s*(\d+\.?\d*),\s*\"b\":\s*(\d+\.?\d*),\s*\"g\":\s*(\d+\.?\d*),\s*\"u\":\s*(\d+\.?\d*)\s*}'

        # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å
        result = {}

        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        matches = re.findall(pattern, prod_kbgu)
        for match in matches:
            dish, cal, b, g, u = match
            result[dish] = {
                "cal": float(cal),
                "b": float(b),
                "g": float(g),
                "u": float(u)
            }

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON
        result_json = json.dumps(result, ensure_ascii=False, indent=4)
        print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:")
        print(result_json)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        json_data = json.loads(result_json)

        sanitized_names = [re.sub(r"\W+", "", dish.lower()) for dish in name_a]

        # –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
        for dish_name, sanitized_key, weight in zip(name_a, sanitized_names, grams_values):
            possible_keys = {
                dish_name,
                dish_name.lower(),
                dish_name.replace(" ", ""),
                dish_name.lower().replace(" ", ""),
                sanitized_key,
            }
            nutrition_data = next((json_data.get(key) for key in possible_keys if key in json_data), None)
            if nutrition_data:
                b = round(float(nutrition_data["b"]) * weight / 100, 3)
                g = round(float(nutrition_data["g"]) * weight / 100, 3)
                u = round(float(nutrition_data["u"]) * weight / 100, 3)
                food_cal = round(float(nutrition_data["cal"]) * weight / 100, 3)
                try:
                    translated_name = translator.translate(dish_name) or dish_name
                except Exception:
                    translated_name = dish_name
                print(b, g, u, food_cal, translated_name)
                cursor.execute(
                    """
                    INSERT INTO food (
                        user_id,
                        date,
                        name_of_food,
                        b,
                        g,
                        u,
                        cal
                    )
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """,
                    (
                        message.from_user.id,
                        datetime.datetime.now().strftime('%Y-%m-%d'),
                        translated_name.title(),
                        b,
                        g,
                        u,
                        food_cal,
                    ),
                )
                conn.commit()
            else:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {dish_name}")

        await message.answer(text=l.printer(message.from_user.id, "InfoInBase"),
                             reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
        await state.clear()
    except:
        await message.answer(text=l.printer(message.from_user.id, 'SendMes'), reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(REG.food_list)


@dp.message(REG.grams)
async def grams(message: Message, state: FSMContext):
    try:
        await state.update_data(grams=message.text)
        data = await state.get_data()
        raw_grams = data['grams']
        name_a = [dish.strip() for dish in data['food_list']]
        cursor.execute("SELECT lang FROM user_lang WHERE user_id = %s", (message.from_user.id,))
        ll = cursor.fetchone()[0]
        translator = Translator(from_lang=ll, to_lang="ru")

        grams_list = [item.strip() for item in raw_grams.split(',') if item.strip()]
        if len(grams_list) != len(name_a):
            await message.answer(
                l.printer(message.from_user.id, 'gram')
                + "\n\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
            )
            await state.set_state(REG.grams)
            return

        try:
            grams_values = [float(item.replace(',', '.')) for item in grams_list]
        except ValueError:
            await message.answer(
                l.printer(message.from_user.id, 'gram')
                + "\n\n‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120 –∏–ª–∏ 120,5)."
            )
            await state.set_state(REG.grams)
            return

        name_b = [re.sub(r"\W+", "", dish.lower()) for dish in name_a]
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç AI
        try:
            a = '{"name":{cal:"",b:"", g:"", u:""}, }'
            prod_kbgu = await generate(f'–ü—Ä–µ–¥—Å—Ç–∞–≤—å –∫–±–∂—É {name_b} –≤ –≤–∏–¥–µ —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ json {a}')
            pattern = r'\"(\w+)\":\s*{\s*\"cal\":\s*(\d+\.?\d*),\s*\"b\":\s*(\d+\.?\d*),\s*\"g\":\s*(\d+\.?\d*),\s*\"u\":\s*(\d+\.?\d*)\s*}'

            # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å
            result = {}

            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            matches = re.findall(pattern, prod_kbgu)
            for match in matches:
                dish, cal, b, g, u = match
                result[dish] = {
                    "cal": float(cal),
                    "b": float(b),
                    "g": float(g),
                    "u": float(u)
                }

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON
            result_json = json.dumps(result, ensure_ascii=False, indent=4)
            print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:")
            print(result_json)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
            json_data = json.loads(result_json)
        except Exception as e:
            print(f"AI failed, using fallback database: {e}")
            json_data = {}
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            for original_name, dish_name in zip(name_a, name_b):
                fallback_data = food_db.find_food_in_database(original_name)
                if not fallback_data:
                    fallback_data = food_db.find_food_in_database(dish_name)
                if fallback_data:
                    json_data[dish_name] = fallback_data
                    print(f"Found {original_name} in fallback database")

        # –†–∞—Å—á–µ—Ç –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
        for original_name, sanitized_key, weight in zip(name_a, name_b, grams_values):
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ AI-–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ fallback-–±–∞–∑–µ
            nutrition_data = json_data.get(sanitized_key) or json_data.get(original_name) or json_data.get(original_name.lower())
            if nutrition_data:
                b = round(float(nutrition_data["b"]) * weight / 100, 3)
                g = round(float(nutrition_data["g"]) * weight / 100, 3)
                u = round(float(nutrition_data["u"]) * weight / 100, 3)
                food_cal = round(float(nutrition_data["cal"]) * weight / 100, 3)
                try:
                    translated_name = translator.translate(original_name) or original_name
                except Exception:
                    translated_name = original_name
                print(b, g, u, food_cal, translated_name)
                cursor.execute(
                    """
                    INSERT INTO food (
                        user_id,
                        date,
                        name_of_food,
                        b,
                        g,
                        u,
                        cal
                    )
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """,
                    (
                        message.from_user.id,
                        datetime.datetime.now().strftime('%Y-%m-%d'),
                        translated_name.title(),
                        b,
                        g,
                        u,
                        food_cal,
                    ),
                )
                conn.commit()
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ AI, –Ω–∏ –≤ fallback
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {original_name}")

        await message.answer(text=l.printer(message.from_user.id, "InfoInBase"),
                             reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
        await state.clear()
    except Exception as e:
        print(f"Error in grams handler: {e}")
        await message.answer(text=l.printer(message.from_user.id, 'SendMes'), reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(REG.food_list)


@dp.message(F.text.in_({'–ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', "W√∂chentlicher Ern√§hrungs- und Trainingsplan",
                        "Plan semanal de nutrici√≥n y entrenamiento", "Weekly nutrition and exercise plan",
                        'Plan semanal de dieta y entrenamiento'}))
async def ai(message: Message, state: FSMContext):
    await message.answer(text=l.printer(message.from_user.id, 'InProcess'))
    cursor.execute(
        "SELECT lang FROM user_lang WHERE user_id = {}".format(message.from_user.id)
    )
    ll = cursor.fetchone()[0]
    translator = Translator(from_lang=ll, to_lang='ru')
    cursor.execute(
        "SELECT user_aim, daily_cal FROM user_aims WHERE user_id = {}".format(message.from_user.id)
    )
    aim, cal = cursor.fetchone()
    cursor.execute(
        f"SELECT user_sex, date_of_birth FROM user_main WHERE user_id = {message.from_user.id} "
    )
    sex, age = cursor.fetchone()
    cursor.execute(
        f"SELECT imt, weight, height FROM user_health WHERE user_id = {message.from_user.id}"
    )
    imt, weight, height = cursor.fetchone()
    aim, cal, sex, age, imt, weight, height = translator.translate(aim), cal, translator.translate(
        sex), age, imt, weight, height
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cache_key_pit = f"plan:pit:{message.from_user.id}:{sex}:{height}:{age}:{imt}:{aim}"
    
    zap_pit = l.printer(message.from_user.id, 'pitforweek').format(sex, height, age, imt, aim)
    plan_pit = await generate(zap_pit, cache_key=cache_key_pit, cache_ttl=config.CACHE_TTL_RECIPES)
    
    cache_key_tren = f"plan:tren:{message.from_user.id}:{sex}:{height}:{age}:{imt}:{aim}"

    zap_tren = l.printer(message.from_user.id, 'trenforweek').format(sex, height, age, imt, aim, plan_pit)
    plan_train = await generate(zap_tren, cache_key=cache_key_tren, cache_ttl=config.CACHE_TTL_RECIPES)

    try:
        if plan_pit and plan_train:
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
            for part in split_message(plan_pit, message.from_user.id):
                await message.answer(part, parse_mode='HTML')

            for part in split_message(plan_train, message.from_user.id):
                await message.answer(part, parse_mode='HTML')

            await message.answer(
                text=l.printer(message.from_user.id, 'recommend'),
                reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))

        else:
            await bot.send_message(message.chat.id, text="Not enough info about user",
                                   reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"


@dp.message(F.text.in_({'–ü–æ–º–æ—á—å —Å —Ä–µ—Ü–µ–ø—Ç–æ–º', "Ayuda con una receta", "Hilfe bei einem Rezept", "Aide pour une recette",
                        'Help with the recipe'}))
async def ai_food(message: Message, state: FSMContext):
    await message.answer(text=l.printer(message.from_user.id, 'choosemeal'),
                         reply_markup=kb.keyboard(message.from_user.id, 'meals'))
    await state.set_state(REG.food_meals)


@dp.message(REG.food_meals)
async def ai_food_meals(message: Message, state: FSMContext):
    await state.update_data(food_meals=message.text)
    data = await state.get_data()
    cursor.execute(f"SELECT lang FROM user_lang WHERE user_id = {message.from_user.id}",
                   )

    ll = cursor.fetchone()[0]
    translator = Translator(from_lang=ll, to_lang="ru")
    meal = translator.translate(data['food_meals'])
    zap = l.printer(message.from_user.id, 'mealai').format(meal)
    await message.answer(text=l.printer(message.from_user.id, 'InProcess'))
    
    cache_key = f"recipe:{meal.replace(' ', '_').lower()}"

    plan_pit = await generate(zap, cache_key=cache_key, cache_ttl=config.CACHE_TTL_RECIPES)
    try:
        if plan_pit:
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
            for part in split_message(plan_pit, message.from_user.id):
                await bot.send_message(message.chat.id, text=part,
                                       reply_markup=kb.keyboard(message.from_user.id, 'main_menu'),
                                       parse_mode='HTML')
        else:
            await bot.send_message(message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                   reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"
    await state.clear()


@dp.message(F.text.in_({'–ü–æ–º–æ—á—å —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π', "Help with training", "Aide √† la formation", "Hilfe bei der Ausbildung",
                        "Ayuda a la formaci√≥n"}))
async def ai_food(message: Message, state: FSMContext):
    await message.answer(text=l.printer(message.from_user.id, 'trenchoose'),
                         reply_markup=kb.keyboard(message.from_user.id, 'tren_type'))
    await state.set_state(REG.train)


@dp.message(REG.train)
async def train(message: Message, state: FSMContext):
    await state.update_data(train=message.text)
    data = await state.get_data()
    cursor.execute(f"SELECT lang FROM user_lang WHERE user_id = {message.from_user.id}",
                   )

    ll = cursor.fetchone()[0]
    translator = Translator(from_lang=ll, to_lang="ru")
    type_tren = translator.translate(data['train'])
    await state.clear()
    await message.answer(text=l.printer(message.from_user.id, 'InProcess'))
    cursor.execute(
        f"SELECT imt FROM user_health WHERE date = '{datetime.datetime.now().strftime('%Y-%m-%d')}' AND user_id = {message.from_user.id}")
    imt = float(cursor.fetchone()[0])
    zap = l.printer(message.from_user.id, 'trenai').format(type_tren, imt)
    
    cache_key = f"training:{type_tren.replace(' ', '_').lower()}:{round(imt)}"

    tren = await generate(zap, cache_key=cache_key, cache_ttl=config.CACHE_TTL_RECIPES)
    await state.update_data(tren_ai=tren)

    try:
        if tren:
            for part in split_message(tren, message.from_user.id):
                await bot.send_message(message.chat.id, text=part,
                                       reply_markup=kb.keyboard(message.from_user.id, 'tren_choise'),
                                       parse_mode='HTML')
                await state.set_state(REG.tren_choiser)


        else:
            await bot.send_message(message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                   reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"


@dp.message(REG.tren_choiser)
async def choising(message: Message, state: FSMContext):
    await state.update_data(tren_choiser=message.text)
    data = await state.get_data()
    mes = data['tren_choiser']
    if mes == l.printer(message.from_user.id, 'return'):
        await message.answer(text=l.printer(message.from_user.id, 'ret2main'),
                             reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
    else:
        c = 0
        tren = data["tren_ai"]
        for i in range(len(tren_list)):
            for m in range(len(tren_list[i])):
                if tren_list[i][m] in tren:
                    gif_url = GIF_LIBRARY.get(tren_list[i][0], None)

                    if gif_url:
                        await bot.send_animation(
                            chat_id=message.chat.id,
                            animation=gif_url,
                            caption=l.printer(message.from_user.id, 'correct_tech').format(tren_list[i][m]),
                            reply_markup=kb.keyboard(message.from_user.id, 'main_menu')
                        )
                    else:
                        c = c + 1
        if c > 0:
            gif_url = "https://media.giphy.com/media/xT9IgIc0lryrxvqVGM/giphy.gif"
            await bot.send_animation(
                chat_id=message.chat.id,
                animation=gif_url,
                reply_markup=kb.keyboard(message.from_user.id, 'main_menu')
            )

        await message.answer(text=l.printer(message.from_user.id, "ret2main"),
                             reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))

    await state.clear()


@dp.message(F.text.in_(
    {'–í—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º—É', 'Acceder al programa', "Aufnahme in das Programm", "Entr√©e dans le programme",
     "Entering the program"}))
async def ais(message: Message, state: FSMContext):
    await message.answer(text=l.printer(message.from_user.id, 'begining'),
                         reply_markup=kb.keyboard(message.from_user.id, 'main_menu')
                         )


@dp.message(F.text.in_(
    {'–°–º–µ–Ω–∞ —è–∑—ã–∫–∞', "Change language", "Changement de langue", "√Ñnderung der Sprache", "Cambio ling√º√≠stico"}))
async def leng2(message: Message, state: FSMContext):
    await state.set_state(REG.leng2)
    await message.answer(text='Please, chose your lenguage:',
                         reply_markup=kb.keyboard(message.from_user.id, 'lenguage'))


@dp.message(REG.leng2)
async def start2(message: Message, state: FSMContext):
    await state.update_data(leng2=message.text)
    data = await state.get_data()
    cursor.execute(f"""

    UPDATE user_lang SET lang='{languages[data['leng2']]}' WHERE user_id = {message.from_user.id};

            """
                   )
    conn.commit()
    await message.answer(text=data['leng2'], reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
    await state.clear()


@dp.message(F.text.in_({'–°–≤–æ–¥–∫–∞', "Resumen", "Zusammenfassung", "R√©sum√©", "Summary"}))
async def svod(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–¥–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–µ—Å–∞/—Ä–æ—Å—Ç–∞ –≤ –ë–î"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ –∏ —Ä–æ—Å—Ç–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("""
        SELECT weight, height FROM user_health 
        WHERE user_id = %s AND date = %s
        ORDER BY date DESC LIMIT 1
    """, (user_id, datetime.datetime.now().strftime('%Y-%m-%d')))
    today_data = cursor.fetchone()
    
    if today_data and today_data[0] and today_data[1]:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        bot_logger.info(f"User {user_id} has weight/height data for today: weight={today_data[0]}, height={today_data[1]}")
        await state.update_data(new_weight=today_data[0], new_height=today_data[1])
        await message.answer(text=l.printer(user_id, 'svoPERIOD'),
                           reply_markup=kb.keyboard(user_id, 'svo'))
        await state.set_state(REG.svo)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        cursor.execute("""
            SELECT weight, height FROM user_health 
            WHERE user_id = %s AND date >= DATE_TRUNC('month', CURRENT_DATE)
            ORDER BY date DESC LIMIT 1
        """, (user_id,))
        month_data = cursor.fetchone()
        
        if month_data and month_data[0] and month_data[1]:
            # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            bot_logger.info(f"User {user_id} has weight/height data for this month: weight={month_data[0]}, height={month_data[1]}")
            await state.update_data(new_weight=month_data[0], new_height=month_data[1])
            await message.answer(text=l.printer(user_id, 'svoPERIOD'),
                               reply_markup=kb.keyboard(user_id, 'svo'))
            await state.set_state(REG.svo)
        else:
            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_logger.info(f"User {user_id} has no weight/height data, requesting input")
            await state.set_state(REG.new_weight)
            await message.answer(l.printer(user_id, 'weight'), reply_markup=types.ReplyKeyboardRemove())



@dp.message(REG.new_weight)
async def new_we(message: Message, state: FSMContext):
    await state.update_data(new_weight=message.text)
    await state.set_state(REG.new_height)
    await message.answer(l.printer(message.from_user.id, 'height'))


@dp.message(REG.new_height)
async def new_he(message: Message, state: FSMContext):
    await state.update_data(new_height=float(message.text))
    await message.answer(text=l.printer(message.from_user.id, 'svoPERIOD'),
                         reply_markup=kb.keyboard(message.from_user.id, 'svo'))
    await state.set_state(REG.svo)


@dp.message(REG.svo)
async def svodka(message: Message, state: FSMContext):
    try:
        await state.update_data(tren_choiser=message.text)
        data = await state.get_data()
        mes = data['tren_choiser']
        new_weight = data['new_weight']
        new_height = float(data['new_height'])
        if "," in str(new_weight):
            we1 = str(new_weight).split(",")
            new_weight = int(we1[0]) + int(we1[1]) / 10 ** len(we1[1])
        else:
            new_weight = float(new_weight)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT user_sex, date_of_birth FROM user_main WHERE user_id = %s
        """, (message.from_user.id,))
        result = cursor.fetchone()
        
        if not result:
            bot_logger.error(f"User {message.from_user.id} not found in user_main")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
            await state.clear()
            return
        
        sex, age = result[0], int(result[1])
        bot_logger.info(f"User {message.from_user.id} requesting summary: sex={sex}, age={age}")
        
        await state.clear()
        imt = round(new_weight / ((new_height / 100) ** 2), 3)
        imt_using_words = calculate_imt_description(imt, message)
        cal = float(calculate_calories(sex, new_weight, new_height, age, message))

        cursor.execute(f"""
                        INSERT INTO user_health (user_id,imt,imt_str,cal,date, weight, height) VALUES ({message.from_user.id},{imt},'{imt_using_words}',{cal},'{datetime.datetime.now().strftime('%Y-%m-%d')}', {new_weight}, {new_height} )
                        ;
        """)
        conn.commit()
    except Exception as e:
        bot_logger.error(f"Error in svodka for user {message.from_user.id}: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                           reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
        await state.clear()
        return
    
    try:
        if mes == '–î–µ–Ω—å' or mes == "Day" or mes == "Jour" or mes == "Tag" or mes == "D√≠a":
            cursor.execute("SELECT SUM(training_cal) FROM user_training WHERE date = '{}' AND user_id = {}".format(
                datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
            result_tren = cursor.fetchone()
            col_call_tren = result_tren[0] if result_tren[0] else 0
            cursor.execute("SELECT SUM(cal) FROM food WHERE date = '{}' AND user_id = {}".format(
                datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
            result_cal_food = cursor.fetchone()
            col_cal_food = result_cal_food[0] if result_cal_food[0] else 0
            cursor.execute("SELECT SUM(b) FROM food WHERE date = '{}' AND user_id = {}".format(
                datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
            result_b = cursor.fetchone()
            col_b = round(result_b[0], 3) if result_b[0] else 0
            cursor.execute("SELECT SUM(g) FROM food WHERE date = '{}' AND user_id = {}".format(
                datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
            result_g = cursor.fetchone()
            col_g = round(result_g[0], 3) if result_g[0] else 0
            cursor.execute("SELECT SUM(u) FROM food WHERE date = '{}' AND user_id = {}".format(
                datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
            result_u = cursor.fetchone()
            col_u = round(result_u[0], 3) if result_u[0] else 0
            cursor.execute("SELECT SUM(count) FROM water WHERE data = '{}' AND user_id = {}".format(
                datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
            result_wat = cursor.fetchone()
            col_wat = round(result_wat[0], 3) if result_wat[0] else 0
            cursor.execute("SELECT name_of_food FROM food WHERE date = '{}' AND user_id = {}".format(
                datetime.datetime.now().strftime('%Y-%m-%d'), message.from_user.id))
            ff = ''
            result_ff = cursor.fetchall()
            for i in result_ff:
                ff += str(i[0])
                ff += ', '

            await bot.send_message(message.chat.id,
                                   text=l.printer(message.from_user.id, 'svoDAY').format(message.from_user.first_name,
                                                                                         datetime.datetime.now().strftime(
                                                                                             '%Y-%m-%d'),
                                                                                         round(col_call_tren,
                                                                                               3) if col_call_tren else 0,
                                                                                         ff, round(col_cal_food,
                                                                                                   3) if col_cal_food else 0,
                                                                                         col_b if col_b else 0,
                                                                                         col_g if col_g else 0,
                                                                                         col_u if col_u else 0,
                                                                                         col_wat * 300 if col_wat else 0)
                                   , reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
        elif mes == '–ú–µ—Å—è—Ü' or mes == "Mes" or mes == "Monat" or mes == "Mois" or mes == "Month":
            weight_month = []
            sr_b = []
            sr_g = []
            sr_u = []
            sr_cal = []
            sr_w = []
            sr_tren = []
            for i in range(1, 32):
                datee = f'{str(datetime.datetime.now().year)}-{str(datetime.datetime.now().month).zfill(2)}-{str(i).zfill(2)}'
                cursor.execute(
                    "SELECT weight FROM user_health WHERE user_id = {} AND date = '{}' ".format(message.from_user.id,
                                                                                                datetime.datetime.now().strftime(
                                                                                                    '%Y-%m-%d')))
                weight_data = cursor.fetchall()
                if weight_data:
                    weight_month.append(weight_data)
                cursor.execute(
                    "SELECT sum(b) FROM food WHERE user_id = {} AND date = '{}'".format(message.from_user.id, datee))
                b_data = cursor.fetchone()
                if b_data:
                    sr_b.append(b_data[0])
                cursor.execute(
                    "SELECT sum(g) FROM food WHERE user_id = {} AND date = '{}'".format(message.from_user.id, datee))
                g_data = cursor.fetchone()
                if g_data:
                    sr_g.append(g_data[0])
                cursor.execute(
                    "SELECT sum(u) FROM food WHERE user_id = {} AND date = '{}'".format(message.from_user.id, datee))
                u_data = cursor.fetchone()
                if u_data:
                    sr_u.append(u_data[0])
                cursor.execute(
                    "SELECT sum(count) FROM water WHERE user_id = {} AND data = '{}'".format(message.from_user.id,
                                                                                             datee))
                w_data = cursor.fetchone()
                if w_data:
                    sr_w.append(w_data[0])
                cursor.execute("SELECT sum(training_cal) FROM user_training WHERE user_id = {} AND date = '{}'".format(
                    message.from_user.id, datee))
                cal_data = cursor.fetchone()
                if cal_data:
                    sr_cal.append(cal_data[0])
                cursor.execute("SELECT sum(tren_time) FROM user_training WHERE user_id = {} AND date = '{}'".format(
                    message.from_user.id, datee))
                time_data = cursor.fetchone()
                if time_data:
                    sr_tren.append(time_data[0])
            if weight_month and sr_b and sr_g and sr_u and sr_cal and sr_tren and sr_w:
                weig_1 = weight_month[0][0]
                weig_2 = new_weight
                new_sr_b = list(filter(is_not_none, sr_b))
                new_sr_g = list(filter(is_not_none, sr_g))
                new_sr_u = list(filter(is_not_none, sr_u))
                new_sr_w = list(filter(is_not_none, sr_w))
                new_sr_cal = list(filter(is_not_none, sr_cal))
                new_sr_tren = list(filter(is_not_none, sr_tren))
                if sum(new_sr_b) > 0:
                    avg_b = round(sum(new_sr_b) / len(new_sr_b), 3)
                else:
                    avg_b = 0
                if sum(new_sr_g) > 0:
                    avg_g = round(sum(new_sr_g) / len(new_sr_g), 3)
                else:
                    avg_g = 0
                if sum(new_sr_u) > 0:
                    avg_u = round(sum(new_sr_u) / len(new_sr_u), 3)
                else:
                    avg_u = 0
                if sum(new_sr_w) > 0:
                    avg_w = sum(new_sr_w) / len(new_sr_w) * 300
                else:
                    avg_w = 0

                avg_training_time = round(sum(new_sr_tren) / len(new_sr_tren), 3) if round(
                    sum(new_sr_tren) / len(new_sr_tren), 3) else 0  # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                avg_calories_burned = round(sum(new_sr_cal) / len(new_sr_cal), 3) if round(
                    sum(new_sr_cal) / len(new_sr_cal), 3) else 0  # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ —Å–æ–∂–∂—ë–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
                await bot.send_message(message.chat.id, text=l.printer(message.from_user.id, 'svoMONTH').format(
                    message.from_user.first_name, weig_1[0], weig_2, avg_training_time, avg_calories_burned, avg_b,
                    avg_g, avg_u, avg_w),
                                       reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
            else:
                await bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        elif mes == '–ì–æ–¥' or mes == "Year" or mes == "Ann√©e" or mes == "Jahr" or mes == "A√±o":
            all_data = []
            total_food_cal = 0
            total_b = 0
            total_g = 0
            total_u = 0
            total_w = 0
            weight_data_all = []
            food_months_with_data = set()

            current_date = datetime.datetime.now()

            for i in range(12):
                current_month = current_date.month - i
                current_year = current_date.year

                if current_month <= 0:
                    current_year -= 1
                    current_month += 12

                first_day_of_month = datetime.date(current_year, current_month, 1)
                if current_month == 12:
                    last_day_of_month = datetime.date(current_year + 1, 1, 1) - datetime.timedelta(days=1)
                else:
                    last_day_of_month = datetime.date(current_year, current_month + 1, 1) - datetime.timedelta(days=1)

                cursor.execute("""
                        SELECT SUM(cal), SUM(b), SUM(g), SUM(u)
                        FROM food 
                        WHERE date >= '{}' AND date <= '{}' AND user_id = {}
                    """.format(
                    first_day_of_month.strftime('%Y-%m-%d'), last_day_of_month.strftime('%Y-%m-%d'),
                    message.from_user.id))
                result_food = cursor.fetchone()
                cursor.execute("""
                              SELECT SUM(count)
                              FROM water
                              WHERE data >= '{}' AND data <= '{}' AND user_id = {}
                          """.format(
                    first_day_of_month.strftime('%Y-%m-%d'), last_day_of_month.strftime('%Y-%m-%d'),
                    message.from_user.id))
                result_wat = cursor.fetchone()
                if result_food and result_food[0]:
                    all_data.append(result_food)
                    total_food_cal += result_food[0]
                    total_b += result_food[1]
                    total_g += result_food[2]
                    total_u += result_food[3]
                    food_months_with_data.add((current_year, current_month))
                if result_wat and result_wat[0]:
                    total_w += result_wat[0]

                    #
                cursor.execute("""
                        SELECT weight 
                        FROM user_health
                        WHERE date >= '{}' AND date <= '{}' AND user_id = {}

                        ORDER BY date ASC
                    """.format(first_day_of_month.strftime('%Y-%m-%d'), last_day_of_month.strftime('%Y-%m-%d'),
                               message.from_user.id))
                weight_data = cursor.fetchall()

                if weight_data:
                    weight_data_all.extend(weight_data)

            if weight_data_all:
                weight_data_all.sort(key=lambda x: x[0])
                start_weight = weight_data_all[0][0]
                end_weight = new_weight
            else:
                start_weight = 'no info'
                end_weight = 'no info'

            cursor.execute("""
                    SELECT AVG(training_cal) 
                    FROM user_training 
                    WHERE user_id = {}
                """.format(message.from_user.id, ))
            result_train = cursor.fetchone()
            avg_train_cal = result_train[0] if result_train and result_train[0] else 0

            avg_food_cal = total_food_cal / len(food_months_with_data) if food_months_with_data else 0
            avg_b = round(total_b / len(food_months_with_data), 3) if food_months_with_data else 0
            avg_g = round(total_g / len(food_months_with_data), 3) if food_months_with_data else 0
            avg_u = round(total_u / len(food_months_with_data), 3) if food_months_with_data else 0
            all_data = list(filter(is_not_none, all_data))
            await bot.send_message(message.chat.id,
                                   text=l.printer(message.from_user.id, 'svoYEAR').format('\n', start_weight,
                                                                                          end_weight, '\n',
                                                                                          round(avg_train_cal, 3), '\n',
                                                                                          round(avg_food_cal, 3), '\n',
                                                                                          round(float(all_data[-1][0]),
                                                                                                3) if round(
                                                                                              float(all_data[-1][0]),
                                                                                              3) else 0,
                                                                                          round(float(all_data[0][0]),
                                                                                                3) if round(
                                                                                              float(all_data[0][0]),
                                                                                              3) else 0, avg_b, avg_g,
                                                                                          avg_u, round(all_data[-1][1],
                                                                                                       3) if round(
                                           all_data[-1][1], 3) else 0, round(all_data[-1][2], 3) if round(
                                           all_data[-1][2], 3) else 0, round(all_data[-1][3], 3) if round(
                                           all_data[-1][3], 3) else 0, round(all_data[0][1], 3) if round(all_data[0][1],
                                                                                                         3) else 0,
                                                                                          round(all_data[0][2],
                                                                                                3) if round(
                                                                                              all_data[0][2], 3) else 0,
                                                                                          round(all_data[0][3],
                                                                                                3) if round(
                                                                                              all_data[0][3], 3) else 0,
                                                                                          total_w / len(
                                                                                              food_months_with_data) * 300 if total_w / len(
                                                                                              food_months_with_data) * 300 else 0),
                                   reply_markup=kb.keyboard(message.from_user.id, 'main_menu'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}"


#    except :
#       await state.set_state(REG.new_weight)
#       await message.answer(l.printer(message.from_user.id, 'weight'), reply_markup=types.ReplyKeyboardRemove())


async def main():
    # Register middleware
    dp.update.middleware(PrivacyConsentMiddleware())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())